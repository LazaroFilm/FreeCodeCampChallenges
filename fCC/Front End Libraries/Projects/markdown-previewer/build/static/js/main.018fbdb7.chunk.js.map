{"version":3,"sources":["App.js","components/Header.js","serviceWorker.js","index.js"],"names":["App","state","value","markdowned","id","className","handleChange","event","setState","target","dangerouslySetInnerHTML","__html","window","marked","breaks","this","name","cols","rows","onChange","onLoad","Component","Header","Navbar","Brand","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAmFeA,G,wNA7EbC,MAAQ,CACNC,MACE,+qCACFC,WACE,yBAAKC,GAAG,UAAUC,UAAU,WAC1B,qD,EAqBNC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEN,MAAOK,EAAME,OAAOP,QACpC,EAAKM,SAAS,CACZL,WACE,yBACEC,GAAG,UACHC,UAAU,UACVK,wBAAyB,CACvBC,OAAQC,OAAOC,OAAON,EAAME,OAAOP,MAAO,CACxCY,QAAQ,U,kEAxBlBC,KAAKP,SAAS,CACZL,WACE,yBACEC,GAAG,UACHC,UAAU,UACVK,wBAAyB,CACvBC,OAAQC,OAAOC,OAAOE,KAAKd,MAAMC,MAAO,CACtCY,QAAQ,W,+BA0BlB,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,mBACb,2BAAOA,UAAU,cACf,+BACE,4BACE,iDACA,4DAEF,4BACE,wBAAIA,UAAU,eAEZ,8BACFA,UAAU,WACVW,KAAK,SACLZ,GAAG,SACHa,KAAK,KACLC,KAAK,KACLhB,MAAOa,KAAKd,MAAMC,MAClBiB,SAAUJ,KAAKT,aACfc,OAAQL,KAAKT,gBAGb,4BAAKS,KAAKd,MAAME,qB,GApEdkB,c,gBCOHC,EARA,WACb,OACE,yBAAKjB,UAAU,UACb,kBAACkB,EAAA,EAAOC,MAAR,+BCKcC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.018fbdb7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./github-markdown.css\";\n// import { Button } from \"react-bootstrap\";\n\nclass App extends Component {\n  state = {\n    value:\n      \"# Welcome to my React Markdown Previewer!\\n\\n## This is a sub-heading...\\n### And here's some other cool stuff:\\n  \\nHeres some code, `<div></div>`, between 2 backticks.\\n\\n```\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == '```' && lastLine == '```') {\\n    return multiLineCode;\\n  }\\n}\\n```\\n  \\nYou can also make text **bold**... whoa!\\nOr _italic_.\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\nThere's also [links](https://www.freecodecamp.com), and\\n> Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | ------------- \\nYour content can | be here, and it | can be here....\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That look like this.\\n\\n\\n1. And there are numbererd lists too.\\n1. Use just 1s if you want! \\n1. And last but not least, let's not forget embedded images:\\n\\n![React Logo w/ Text](https://techchronos.com/wp-content/uploads/SszarkLabs/stack-icon/cywBkaGwkMeDAuJbSt1k.png)\\n\",\n    markdowned: (\n      <div id=\"preview\" className=\"Preview\">\n        <p>Markdowned goes here</p>\n      </div>\n    ),\n  };\n\n  componentDidMount() {\n    this.setState({\n      markdowned: (\n        <div\n          id=\"preview\"\n          className=\"Preview\"\n          dangerouslySetInnerHTML={{\n            __html: window.marked(this.state.value, {\n              breaks: true,\n            }),\n          }}\n        />\n      ),\n    });\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n    this.setState({\n      markdowned: (\n        <div\n          id=\"preview\"\n          className=\"Preview\"\n          dangerouslySetInnerHTML={{\n            __html: window.marked(event.target.value, {\n              breaks: true,\n            }),\n          }}\n        />\n      ),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"MarkdownMachine\">\n          <table className=\"two-tables\">\n            <tbody>\n              <tr>\n                <th>Type things here:</th>\n                <th>And see them rendered here:</th>\n              </tr>\n              <tr>\n                <th className=\"two-columns\">\n                  {/* prettier-ignore */}\n                  <textarea\n                className=\"TextArea\"\n                name=\"editor\"\n                id=\"editor\"\n                cols=\"50\"\n                rows=\"20\"\n                value={this.state.value}\n                onChange={this.handleChange}\n                onLoad={this.handleChange}\n               />\n                </th>\n                <th>{this.state.markdowned}</th>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./Header.css\";\nimport { Navbar } from \"react-bootstrap\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <Navbar.Brand>The Markdown Machine</Navbar.Brand>\n    </div>\n  );\n};\n\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Header from \"./components/Header\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}