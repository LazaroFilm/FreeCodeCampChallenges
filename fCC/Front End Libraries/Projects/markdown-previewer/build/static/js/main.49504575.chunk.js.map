{"version":3,"sources":["App.js","components/Header.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","marked","window","mkdned","__html","target","value","breaks","setState","markdowned","dangerouslySetInnerHTML","console","log","state","id","href","className","name","cols","rows","this","onChange","Component","Header","Navbar","Brand","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0UAmFeA,G,8DA7Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiCRC,aAAe,SAACC,GACd,IAAMC,EAASC,OAAOD,OAChBE,EAAS,CACbC,OAAQF,OAAOD,OAAOD,EAAMK,OAAOC,MAAO,CACxCC,QAAQ,KAGZ,EAAKC,SAAS,CAAEF,MAAON,EAAMK,OAAOC,QACpC,EAAKE,SAAS,CACZC,WAAY,yBAAKC,wBAAyBP,MAE5CQ,QAAQC,IACNX,EAAOD,EAAMK,OAAOC,MAAO,CACzBC,QAAQ,MA7CZ,EAAKM,MAAQ,CACXP,MACE,qVACFG,WACE,6BACE,wBAAIK,GAAG,UAAP,UACA,wBAAIA,GAAG,cAAP,cACA,2BACE,uBAAGC,KAAK,kHAAR,OAGA,6BACA,6CACA,6BACA,6CAEF,4BACE,wCAEE,oCACE,6CAIN,2BACE,gDA3BS,E,qDAqDjB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,mBAEb,8BACEA,UAAU,WACVC,KAAK,SACLH,GAAG,SACHI,KAAK,KACLC,KAAK,KACLb,MAAOc,KAAKP,MAAMP,MAClBe,SAAUD,KAAKrB,eAIjB,yBAAKe,GAAG,UAAUE,UAAU,WACzBI,KAAKP,MAAMJ,kB,GAtENa,c,gBCOHC,EARA,WACb,OACE,yBAAKP,UAAU,UACb,kBAACQ,EAAA,EAAOC,MAAR,+BCKcC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.49504575.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./App.scss\";\n// import { Button } from \"react-bootstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value:\n        \"# Header\\n## Sub-header\\n[fCC](https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer)\\n`inline code`\\n``` code block ```\\n1. list item\\n> Blockquote\\n[img]:https://d33wubrfki0l68.cloudfront.net/2f7693e1933ac514c960f51ceae72c91c6716eb2/b2efd/img/fcc_primary_small.svg\\n**Bold text**\",\n      markdowned: (\n        <div>\n          <h1 id=\"header\">Header</h1>\n          <h2 id=\"sub-header\">Sub-header</h2>\n          <p>\n            <a href=\"https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer\">\n              fCC\n            </a>\n            <br />\n            <code>inline code</code>\n            <br />\n            <code>code block</code>\n          </p>\n          <ol>\n            <li>\n              list item\n              <blockquote>\n                <p>Blockquote </p>\n              </blockquote>\n            </li>\n          </ol>\n          <p>\n            <strong>Bold text</strong>\n          </p>\n        </div>\n      ),\n    };\n  }\n\n  handleChange = (event) => {\n    const marked = window.marked;\n    const mkdned = {\n      __html: window.marked(event.target.value, {\n        breaks: true,\n      }),\n    };\n    this.setState({ value: event.target.value });\n    this.setState({\n      markdowned: <div dangerouslySetInnerHTML={mkdned} />,\n    });\n    console.log(\n      marked(event.target.value, {\n        breaks: true,\n      })\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"MarkdownMachine\">\n          {/* prettier-ignore */}\n          <textarea\n            className=\"TextArea\"\n            name=\"editor\"\n            id=\"editor\"\n            cols=\"50\"\n            rows=\"20\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          >\n            \n            </textarea>\n          <div id=\"preview\" className=\"Preview\">\n            {this.state.markdowned}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./Header.css\";\nimport { Navbar } from \"react-bootstrap\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <Navbar.Brand>The Markdown Machine</Navbar.Brand>\n    </div>\n  );\n};\n\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Header from \"./components/Header\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}